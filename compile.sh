#!/bin/bash
SCRIPT_DIR=$(dirname $(realpath ${BASH_SOURCE}))

clear
#
TARGET_HOST=${TARGET_HOST=host_asan}
# toolchain env
source ${SCRIPT_DIR}/toolchain/toolchain_${TARGET_HOST}.sh

cd ${SCRIPT_DIR}
export SRC_DIR=${SRC_DIR=src}
export BUILD_DIR=${BUILD_DIR=build_${TARGET_HOST}}
export TARGET_NAME=${TARGET_NAME=exec}

# qemu to run cross-compiled program
if test "$(uname -m)" != "${SYSTEM_PROCESSOR}"; then
    QEMU_RUN_PROGRAM="qemu-${SYSTEM_PROCESSOR}"
    which ${QEMU_RUN_PROGRAM} >/dev/null 2>&1
    if test $? -eq 0; then
        if test -z "${SYSROOT}"; then
            QEMU_RUN_CMD="${QEMU_RUN_PROGRAM}"
        else
            QEMU_RUN_CMD="${QEMU_RUN_PROGRAM} -L ${SYSROOT}"
        fi
    fi
fi

function regen_mk() {
    rm -rf ${BUILD_DIR}
    ${SCRIPT_DIR}/builder/glob_src.sh
    test $? -ne 0 && exit 1
}

# generate compile_commands.json if we have compiledb
function regen_compiledb() {
    make -C ${BUILD_DIR} clean >/dev/null
    test $? -ne 0 && exit 1

    make -C ${BUILD_DIR} -n >${BUILD_DIR}/build.log
    #
    COMPILE_DB_CMD=$(which compiledb)
    if test -n "${COMPILE_DB_CMD}"; then
        echo ""
        cd ${BUILD_DIR}
        ${COMPILE_DB_CMD} -v -S -p build.log
        cd -
        cp ${BUILD_DIR}/compile_commands.json .
        echo ""
    fi
}

# generate .clangd
function regen_clangd_config() {
    local TMP_CC
    local TMP_CXX
    local TMP_SYSROOT_DIR
    local CLANGD_CONF="$1"
    if test -z "$CLANGD_CONF"; then
        CLANGD_CONF=".clangd_autogen"
    fi
    make -C ${BUILD_DIR} dump_compile_info

    TMP_CC=$(cat ${BUILD_DIR}/c_compiler)
    TMP_CXX=$(cat ${BUILD_DIR}/cxx_compiler)
    if test -n "$TMP_CC"; then
        TMP_SYSROOT_DIR=$($TMP_CC -print-sysroot)
    elif test -n "$TMP_CXX"; then
        TMP_SYSROOT_DIR=$($TMP_CXX -print-sysroot)
    fi

    cat ${BUILD_DIR}/cppflags | tr ' ' '\n' | awk '!seen[$0]++' >${BUILD_DIR}/cppflags_strip
    if test -n "$TMP_SYSROOT_DIR"; then
        echo "-I$TMP_SYSROOT_DIR" >>${BUILD_DIR}/cppflags_strip
    fi

    cat ${BUILD_DIR}/cppflags_strip | sed -e 's/-I/-I\n/g' | while read line; do
        (
            if test "$line" = "-I"; then
                flag="$line"
            elif test -d "$BUILD_DIR/$line"; then
                flag="$(realpath $BUILD_DIR/$line)"
            else
                flag="$line"
            fi
            echo "$flag" >>${BUILD_DIR}/cppflags_strip_lines
        )
    done

    # https://clangd.llvm.org/config.html#diagnostics
    cat >${CLANGD_CONF} <<EOF
# auto-generated by $BASH_SOURCE
EOF

    cat >>${CLANGD_CONF} <<EOF
---
If:                               
  PathMatch: .*\.(h|H|hpp|hxx|cc|cpp|CPP|cxx)    
Diagnostics:      
  #ClangTidyChecks: true       
  ClangTidy:             
    Add: 
      - "bugprone-*"
      - "performance-*"
CompileFlags:           
  Compiler: $(which ${TMP_CXX})
  Add:
    - "-Wall"           
    - "-Wextra" 
    - "-xc++"   
EOF
    cat ${BUILD_DIR}/cppflags_strip_lines | while read line; do
        echo "    - \"$line\"" >>${CLANGD_CONF}
    done

    cat >>${CLANGD_CONF} <<EOF
---
If:                               
  PathMatch: .*\.(c|C)    
Diagnostics:      
  #ClangTidyChecks: true       
  ClangTidy:             
    Add: 
      - "bugprone-*"
      - "performance-*"
CompileFlags:           
  Compiler: $(which ${TMP_CC})
  Add:
    - "-Wall"           
    - "-Wextra"     
EOF
    cat ${BUILD_DIR}/cppflags_strip_lines | while read line; do
        echo "    - \"$line\"" >>${CLANGD_CONF}
    done
}

function clean_target() {
    make -C ${BUILD_DIR} clean
    test $? -ne 0 && exit 1
}

function build_target() {
    make -C ${BUILD_DIR} -j1
    test $? -ne 0 && exit 1
}

function rebuild_target() {
    make -C ${BUILD_DIR} clean
    test $? -ne 0 && exit 1
    make -C ${BUILD_DIR} -j$(nproc)
    test $? -ne 0 && exit 1
}

function run_target() {
    echo ""
    CMD="${QEMU_RUN_CMD} ${BUILD_DIR}/${TARGET_NAME}"
    echo "run:"
    echo $CMD $@
    # eval $CMD
    $CMD $@
}

function place_time_cursor() {
    CURSOR_TAG="$@"
    CURSOR_TIME="$(date)"
}

function dump_time() {
    CURRENT_TIME="$(date)"
    echo "$CURSOR_TAG"
    echo "beginAt: ${CURSOR_TIME}"
    echo "current: ${CURRENT_TIME}"
}

case $1 in
makefile)
    regen_mk
    ;;
compiledb)
    regen_compiledb
    ;;
clangd)
    shift 1
    echo "$BASH_SOURCE clangd $@"
    regen_clangd_config $@
    ;;
clean)
    clean_target
    ;;
rebuild)
    place_time_cursor $0 $@
    rebuild_target
    dump_time
    ;;
build)
    place_time_cursor $0 $@
    build_target
    dump_time
    ;;
run)
    shift 1
    run_target $@
    ;;
*)
    place_time_cursor $0 $@
    regen_mk
    regen_compiledb
    regen_clangd_config ".clangd"
    rebuild_target
    dump_time
    echo ""
    run_target $@
    dump_time
    ;;
esac
